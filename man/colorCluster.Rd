% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colorCluster.R
\name{colorCluster}
\alias{colorCluster}
\title{Average RGB band color intensity within members of the same cluster}
\usage{
colorCluster(
  df,
  k = "Cluster",
  r = "Red",
  g = "Green",
  b = "Blue",
  bind = TRUE
)
}
\arguments{
\item{df}{a data frame with numeric Red, Green and Blue values (three columns)
and a column that aggregates the points (e.g., Cluster)}

\item{k}{Column name with the information to aggregate/generalize the data
(e.g., cluster, group, region, country, ...). Default Cluster.}

\item{r}{red channel column name. From 0 to 255. Default "Red"}

\item{g}{green channel column name. From 0 to 255. Default "Green"}

\item{b}{blue channel column name. From 0 to 255. Default "Blue"}

\item{bind}{Logical. Default TRUE. Whether the output data frame is to be
merged with the input data frame.
#'}
}
\value{
if bind = FALSE: data frame with as many unique values as there are
in the cluster column.
The data frame contains six columns as follows:
- Cluster: the original name of the column is changed to Cluster,
- Red.K, Green.K and Blue.K: intensity of each color band respective to each
cluster,
- RGB.K: RGB color in decimal format respective to each cluster, and
- HEX.K: RGB color in hexadecimal format respective to each cluster.
if bind = TRUE:
returns the original df with as many columns as the original df
plus those mentioned above.
}
\description{
This function is useful when you have the Red, Green and Blue values for some
points at a lower level category (e.g., cities) and you want to obtain an
average color that define a group of your points (e.g., regions)
To map this output use platMap()
}
\examples{
# Sample data frame. The Red, Green and Blue columns can be created with the
# function getColors() or getRGB()
df <- data.frame(
lat = c(4.611, 6.251, 3.437, 10.391, 10.963),
long = c(-74.083, -75.563, -76.522, -75.514, -74.796),
clusters = c("Andes", "Andes", "Andes", "Coast", "Coast"),
Red = c(255, 200, 100, 50, 0),
Green = c(100, 150, 200, 255, 50),
Blue = c(50, 75, 100, 125, 150)
)

# Obtain a RGB colors per cluster only
colors <- colorCluster(df = df, k = "clusters", bind = FALSE)
print(colors) # Only resultant values. One column per cluster.

# Obtain RGB colors per point and per cluster. The original number of rows,
# as well as the columns lat and long are preserved
colors <- colorCluster(df = df, k = "clusters", bind = TRUE)
print(colors) # Colors per point and per group.

}
